// Linux Filesystem, Partitions & Inodes

When we connect some devices to our machines, it needs some device drivers to function properly and these device drivers need some sort of device files to function properly. 

These device files are inside the '/dev' directory.

** Do: 'ls /dev', to see all the directories inside the dev directory.

Here there is a 'null' directory which moves any error directly to the trash without showing it as an error in the command output.
It is the blackhole of the computer system.

eg. 'lg 2> /dev/null' → gives no error
'lg' → gives an error of 'command not found'

** If we do 'ls -l /dev', we see various groups of data, which is as follows:

1. Permissions (10 bit string)
2. Owner
3. Group 
4. Major Device Number 
5. Minor Device Number  
eg. 10, 235 (10 = Major Device Number | 235 = Minor Device Number)
6. Timestamp
7. Device name

All these are contents of the '/dev' directory.

♦ Permissions

If first bit is:
d → directory 
- → regular file 
l → link 
c → character (character device)
b → block 
p → pipe (|) 
s → socket 

♣ c → Character Devices - It transfer data, one character at a time.

• b → block device - These devices transfer data in the form of large big fixed size blocks. 
Block Devices - Hard Disks, SSDs, etc.

p → pipe - Allows 2 or more processes to communicate with each other and instead of sending the data to the device itself, it sends the data to some other processes.

s → socket device - These also facilitate the communications between processes, just like the piping devices but, they can communicate with multiple processes at once.

♦ Owners - Covered

♦ Groups - Covered

♦ Major device number - Represents the device drivers that are being used by a device.

♦ Minor Device Number - Tells the kernel what unique device it is.

Two devices might have the same major device number but it will always have unique minor device numbers.

Both (major and minor device number) of these are used for 'device characterization'.

Sudo Devices - Devices which are not physically connected to the system.

eg - /dev/null, /dev/zero, /div/random

These 3 Sudo devices are also Character Devices.

'/sys' directory - Gives a more detailed information about the '/dev' directory.

/sys vs /dev

• The /dev directory allows programs to access devices.

• The /sys directory is used to view information and manage devices.

• The /sys directory is also known as a 'filesystem'. It contains all the information about all the devices that are there in the system.

eg, model of the device, manufacturer of the device, where is the device plugged in the system, the state of the device, the hierarchy of the device etc. 

Lets explore the /sys directory: 
** 'ls /sys'

fs = filesystems

** 'ls /sys/devices'

** 'ls /sys/dev' (we see some links)
links format- 'major device number:minor device number'

** 'ls -l /sys/dev/block/' (Explore in deep about all these links)

block -> all these devices are block devices

** 'ls /sys/dev/block/11:0' (We can also take any other link apart from 11:0)

The system manages the devices from here. 


// Filesystems (fs) hierarchy:

** 'ls -l /' checking all the components of the root directory.

We see:

1. / → Root directory - It is the root of the filesystem hierarchy. Everthing starts from here.

2. bin → Bin Directory - It contains all the essential and ready to run binaries that are there, it also contains binaries for some of the most common commands that are there like, ls, cp, mkdir etc.

bin = binaries

3. boot → boot directory - This boot directory contains the boot loader files that are used by the kernel. 

4. dev → dev directory - It contains the device files

5. etc → etc directory - This is the core system config directory, it contains all the configuration files of any program that you are running.

6. home → home directory - Personal directory which depends from user to user.

7. lib → lib directory - This contains the library files that the binaries can use.

8. lost and found directory

9. media → media directory - It is the attachment point for any external devices connected to a system eg. a USB drive 

10. mnt → Temporary mounted filesystem 

11. opt - This contains the 'optional applications software packages'.

** eg. 'ls /opt/'

12. proc → process info 

13. root → Home Directory for the root user (as root is a user too).

14. run → This contains information about the running system since it was booted.

15. sbin → System Binaries (only the root can run them).

16. sys → Helps in managing all the devices in the filesystem.

17. tmp → Storage for Temporary files.

18. usr → user installed softwares and utilities.

19. var → variable directory - Any user tracking, system logging, caches, basically anything which is continously changing is maintained in this directory.

continously changing = variable


// FileSystem Types

Different filesystems  behave differently and support applications which are suitable to them.

Each filesystem has an 'abstraction layer' (aka virtual filesystem).
If the application is not supported by the filesystem, it is the job of the virtual filesystem to make them suitable for each other.
(see image)

Journaling - If we are doing some important work, we can note it down in a journal. By this way the system can know what it was doing before it was turned off.

If the system turns off unexpectedly, it will check the journal first instead of checking the whole filesystem while rebooting. This saves us a lot of time else rebooting will take a lot longer time.

Desktop file system types:

1. ext4 - One of the most latest versions of the linux file systems. Compatible with previous file versions like ext2, ext3 etc.
ext4 supports disk space upto 1 exabyte  
ext4 supports file space upto 16 terabytes 

(8 bits = 1 byte)
(1024 bytes = 1 KB aka kilobyte)
(1024 KB = 1 MB aka megabyte)
(1024 MB = 1 GB aka gigabyte)
(1024 GB = 1 TB aka terabyte)
(1024 TB = 1 PB aka petabyte)
(1024 PB = 1 EB aka exabyte)
(1024 EB = 1 ZB aka zetabyte)
(1024 ZB = 1 YB aka yotabyte)
(1024 YB = 1 BB aka brontobyte)
(1024 BB = 1 GPB aka geopbyte)

It (ext4) is the standard choice for a linux filesystem.

2. Btrfs aka Butter/Better filesystem - This the more latest versions of linux filesystems, but still it is not stable with the linux filesystem even though it has some advanced features which are not there in the previous versions.

3. XFS - High performing Journaling filesystem. It is good for servers that host media eg. YouTube. 

4. NTFS and FAT - Windows filesystem

5. HFS+ - MAC OS filesystem 

** To check which filesystem you are using, use : "df -T"

here we see:
In /dev/sda2 we are using vfat filesystem i.e. we are using windows in this one.

In /dev/sda3 we are using ext4 filesystem i.e. we are using linux in this one.

All hardwares and SSDs in our systems are block devices.

We can create partitions in these block devices, these are useful for separating data. Instead of having just one block device having only one filesystem, we can create multiple block devices each having its own filesystem via partitions.

Partition Tables tell us how a disk is partitioned, where does the partition begin and end, which partitions are bootable, what sectors of a disk are allocated for the partitions etc. 

2 Main partition schemes:

1. MBR - Master Boot Record
2. GPT - GUID Partition Table

Partitions help us organize data, we can have 1 or more partitions in a disk.
But these partitions cannot overlap each other.

Free Space - Space in a disk which is not allocated to any partitions.



MBR - Traditional partition table, used previously

Drawbacks:
It can only have 4 primary partitions
It can support disk space upto only 2  TB.

Out of these 4 primary partitions, we can only convert 1 partition as an 'Extended Partition'.
This extended partition has a sub-unit called 'logical partition' which works exactly as the primary partition, which is utter nonsensical. 
Extended partitions can have 'n' no. of logical partitions.



GPT - This is becoming the new standard of partitioning of disks.

It has only one type of partition. We can make as many partitions out of it as we like. 

Each of these partitions has a GUID (Globally Unique ID). This is used usually with the UEFI based booting.

Filesystem Structure - 

Filesystem is just an organized collection of files and directories. It is like a database to manage the files.

It has 4 major components:

1. Boot Block - It is located in the first few sectors of the filesystem, it is not actually used by the filesystem but it is used to boot the OS. 
Each OS needs only 1 Boot Block.

2. Super Block - It is a single block that comes after the boot block. It contains some information about the filesystem like the size of the inode table, size of the filesystem etc.

3. Inode Table - Like a Database that manages our files. Each file or a directory has a unique entry in the inode table. It just contains information about the files.

4. Data Blocks - Actual data of the files and directories.

** "sudo parted -l" - Shows the filesystem structure and the partitions table in a little more detail.

Tools for partitioning:

1. fdisk - CLI based, does not support GPT
2. parted -  CLI based, does support GPT and MBR.
3. G-parted - GUI based version of parted.
4. gdisk - CLI based, does not support MBR.

recommended -> parted / G-parted

** "cat /etc/fstab" - Static file system information.
When you automatically want to mount a filesystem on the startup of your system. You can add it in this file.

When we want to read or go thorough a filesystem, we must mount it first.

We see many info like UUID, filesystem types, mounting options, <dump>, <pass>, swap

<dump> - Used by dump utility on when to create a backup. Default value = 0.

<pass> - In case of any discrepancies, in what order should our filesystem should be checked.
0 → don't check it 
1 → check it 

swap - Helps in assigning some virtual memory to our system.
When the RAM is almost full, we can use swap to create a virtual memory partition, put all low priority tasks (idle processes) there. By this some RAM memory is freed up for the high priority tasks (active processes).

** "df -h" - It shows me the utilization of the currently mounted filesystems. 

"-h" flag means, give me the human readible form of it.

** To check the size usage by all processes, files and directories in our system, use: "du -h"

** To see the longer process, use: "du -h /"


Inode (Index Node) - Each inode table has some files / directories which contain an inode. These inodes contain so much information about a file except for the filename and the file itself, as they are stored in the disk and not in the inode.

When a filesystem is created, some space for inode is left.

When our inode space is full, we cannot save and store files in the disk, even though the disk has some space still left.

** To know how much inodes are left in our system, use: "df -i".

When we create many empty files / directories, inode table fills up faster than disk space resulting in 0 inodes.

Generally disk space is lesser than inode space but if we do the above thing, we can end up with zero inodes.

Inodes are identified with inode numbers.

Each new file/directory created, gets an inode number.

Usually they are in ascending order like 1,2,3,....

But if a file from a lower inode number say 2 is deleted, that 2 is freed up and it will be given to the immidiate next new file/directory.

** To check all the inode numbers assigned, use: "ls -li"

ls = list
-l = long/detailed list
-i = show inode number  

** Get a more detailed information about this by using: "stat (directory name/)"
We are in home directory now.

1.24.30