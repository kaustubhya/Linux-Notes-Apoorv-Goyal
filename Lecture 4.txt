Processes In Linux - How Linux Works Internally?

Processes are basically just the programs that are running on our machines.

These are managed by the kernel and each process has its own Process Id (PID).

Kernel uses PID to identify processes.

* To check all current processes running in our system, use -> 'ps'

We get 4 columns as output here: 
PID, TTY, TIME, CMD 

TTY is the 'controlling terminal' of the process. Terminal ID is written in TTY.

TIME - It refers to the total CPU usage time the CPU is taking.

CMD/command - The command we are presently running.

** 'ps aux' - Shows the process only run by you.
It has the following flags: 
** 'ps aux -a' - Shows all the processes running
** 'ps aux -u' - Shows the details about the processes running
** 'ps aux -x' - List down all the processes including those who don't have a TTY associated with them.

** To Open a new terminal, use: 'Ctrl + Alt + T'

** To Open a new window, use: 'Ctrl + Shift + T'

** To toggle between the two windows, use 'Alt + 1 and Alt + 2' 

After putting in 'ps aux' we see several fields, 

1. USER field - Shows the user which owns all these processes

2. PID field - Covered already

3. %CPU field - How much % of CPU time is a process using.

4. %MEM - How much % of memory is a process using out of the entire physical memory of the system.

5. VSZ - Virtual memory usage of the entire process. It is the total amount of memory reserved/available for a process. A  process cannot use any more memory than the reserved memory.

6. RSS - Amount of memory that the process is actually using.

VSZ >= RSS

memory here is listed in 'KB'

7. TTY - 3 types of values here: 
?, ttyn, pts/n 

n = 0, 1, 2, .....

? - No terminal associated.

8. STAT - Status of the process 

9. START - When (at what time) did we start the process.

10. TIME - Covered

11. Command - Covered

** To get the real time data of the 'ps aux' command, use: 'top'

It refreshes in about every 5-10 seconds

It is generally used to see which process is slowing our system down or affecting our processes. 

// Controlling Terminal 

2 types:

1. TTYN - Regular Terminal (No graphics associated with it, simply just a shell, no mouse nothing, use just your keyboard to type-in your commands).

** To access it - Use: 'Ctrl + Alt + F1/F2/F3/....'

2. pts/n - Pseudo Terminal 

All processes are bound by a controlling terminal, when you close the terminal, the processes are also closed.

Daemon Processes - Background Processes (run in background), they are opened and closed whenever the system turns on and off.
These are not associated with the controlling terminal.

? - Essential Processes, these are also not associated with the controlling terminal. We don't want them to shut down.

Process are just instances of the program that are running and we can have as many instances as we want.

Kernal keeps tabs on all the processes that are running, i.e. 
it knows the status of the process, who is the owner of the process, what and how much resources are allocated to each process.

When we run a code or a program in a system, the kernel loads up the code of that program in the memory and it determines and allocates all the resources that the program may need. 

Kernel fullfils each and every need of a process.

When a process ends, it frees up all the resources that it was using and those resources can now be used by other processes.


// Creating a process

When a process is created, it might clone itself to create a new process, using "Fork System Call".

System call is like a request the program makes to the kernel of the operating system. 

The fork system call creates somewhat of an identical child process and assigns a PID to it.

The original process from which the child process was cloned, becomes the parent process.

Parent and Child have both unique and different PIDs.

Now a child process can:
1. Choose to run the same program as its parent. or
2. Run a new program by using the "execve system call"

** Now use "ps -l" to see a detailed version of all the processes.

We notice 2 fields here: PID (Process ID) and PPID (Parent Process ID).

** To see the PID of an invisible process via the PPID, use "ps aux | grep (PPID)"

In this case:

we had the bash process as the parent process, ps as the child process and gnome as the grand parent process.

Hierarchy:

gnome
↓
bash
↓
ps

Now the ultimate parent process, one who is at the topmost level (i.e. the mother process) is called the "init" process.

When system boots up, the kernel creates the mother (i.e. init) process and this has a PID of 1.

This process runs on root privilages (since root is the owner of this process)and it runs a lot of processes which are responsible for the running of the system.  

These processes which are responsible for the running of the system, are called "daemon processes". Mother process is their parent.

// Termination of a process

A process can exit by using the "_exit system call". This system call frees all the resources that the process was using.

When a process shuts down, it uses a "termination status" to tell the kernel why it is shutting down.

The most common termination status is "0", which means that the process was successful.

When a child process dies, the parent acknowledges the death of the child by using a "wait system call". 


Edge cases:

1. Parent dies before child:

Orphan Processes - These are those child processes whose parent processes have died before them.
In this scenario, the kernel puts the orphan (child) process under the mother process and the mother process initiates the "wait system call" so that the child can rest in peace.

2. Parent process not acknowledging the death of the child process:

In this scenario, the kernel transforms the child process into a zombie process.

Here if the parent process calls the "wait system call", it is called "reaping", the child process can now rest in peace.

If this does not happen then the kernel puts the zombie (child) process under the mother process and the mother process initiates the "wait system call" so that the child can rest in peace.

 // Signal

 It is a notification to the process that something has happened.

 There are signal handlers for various signals which are used by processes.

 Process can:
 • Ignore the signals
 • Catch the signals using signal handlers
 • Block the signals using "signal mask".

 Various types of signals:
 • SIGHUP/HUP/1 - HangUP
 • SIGINT/INT/2 - Interrupt
 • SIGKILL/KILL/9 - Kill (This signal cannot be blocked using masking and it destroys the entire process).
 • SIGSEGV/SEGV/11 - Segmentation fault
 • SIGTERM/TERM/15 - Terminate
 • SIGSTOP/STOP/19 - Stop 

** To send a termination signal to kill any process, use: "kill (PID)", kernel then terminates the process and frees up the resources it was using.

** To completely kill/destroy a process, use: "kill -9 (PID)", kernel here takes some time to terminate the process and free up the resources it was using.

When the controlling terminal is closed, you are hung up and you don't have any medium to work anymore, in this scenario, processes receive SIGHUP signal.

SIGINT is used to gracefully kill a process.

SIGKILL just kills the process and no cleanup of resources is done after the process is killed.

SIGTERM is used to clean up and free the resources first and then kill the process.

SIGSTOP is used to stop the process for some time and then resume it.

SIGSEGV is used when a process is trying to access some area of the memory that it has no access to.


// time slice

We often wonder that when our computer multitasks, all process run together all at once, but it is not the case, in fact the CPU gives each process a fraction of time to use it and then moves on to the next process, this fraction of time is what we call "time slice".
This happens in a round robin manner, i.e. CPU first uses process P1, then P2 then P3 then again P1 then P2 then P3 then P1 again and so on.