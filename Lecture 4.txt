Processes In Linux - How Linux Works Internally?

Processes are basically just the programs that are running on our machines.

These are managed by the kernel and each process has its own Process Id (PID).

Kernel uses PID to identify processes.

* To check all current processes running in our system, use -> 'ps'

We get 4 columns as output here: 
PID, TTY, TIME, CMD 

TTY is the 'controlling terminal' of the process. Terminal ID is written in TTY.

TIME - It refers to the total CPU usage time the CPU is taking.

CMD/command - The command we are presently running.

** 'ps aux' - Shows the process only run by you.
It has the following flags: 
** 'ps aux -a' - Shows all the processes running
** 'ps aux -u' - Shows the details about the processes running
** 'ps aux -x' - List down all the processes including those who don't have a TTY associated with them.

** To Open a new terminal, use: 'Ctrl + Alt + T'

** To Open a new window, use: 'Ctrl + Shift + T'

** To toggle between the two windows, use 'Alt + 1 and Alt + 2' 

After putting in 'ps aux' we see several fields, 

1. USER field - Shows the user which owns all these processes

2. PID field - Covered already

3. %CPU field - How much % of CPU time is a process using.

4. %MEM - How much % of memory is a process using out of the entire physical memory of the system.

5. VSZ - Virtual memory usage of the entire process. It is the total amount of memory reserved/available for a process. A  process cannot use any more memory than the reserved memory.

6. RSS - Amount of memory that the process is actually using.

VSZ >= RSS

memory here is listed in 'KB'

7. TTY - 3 types of values here: 
?, ttyn, pts/n 

n = 0, 1, 2, .....

? - No terminal associated.

8. STAT - Status of the process 

9. START - When (at what time) did we start the process.

10. TIME - Covered

11. Command - Covered

** To get the real time data of the 'ps aux' command, use: 'top'

It refreshes in about every 5-10 seconds

It is generally used to see which process is slowing our system down or affecting our processes. 

// Controlling Terminal 

2 types:

1. TTYN - Regular Terminal (No graphics associated with it, simply just a shell, no mouse nothing, use just your keyboard to type-in your commands).

** To access it - Use: 'Ctrl + Alt + F1/F2/F3/....'

2. pts/n - Pseudo Terminal 

All processes are bound by a controlling terminal, when you close the terminal, the processes are also closed.

Daemon Processes - Background Processes (run in background), they are opened and closed whenever the system turns on and off.
These are not associated with the controlling terminal.

? - Essential Processes, these are also not associated with the controlling terminal. We don't want them to shut down.

Process are just instances of the program that are running and we can have as many instances as we want.

Kernal keeps tabs on all the processes that are running, i.e. 
it knows the status of the process, who is the owner of the process, what and how much resources are allocated to each process.

When we run a code or a program in a system, the kernel loads up the code of that program in the memory and it determines and allocates all the resources that the program may need. 

Kernel fullfils each and every need of a process.

When a process ends, it frees up all the resources that it was using and those resources can now be used by other processes.


// Creating a process

When a process is created, it might clone itself to create a new process, using "Fork System Call".

System call is like a request the program makes to the kernel of the operating system. 

The fork system call creates somewhat of an identical child process and assigns a PID to it.

The original process from which the child process was cloned, becomes the parent process.

Parent and Child have both unique and different PIDs.

Now a child process can:
1. Choose to run the same program as its parent. or
2. Run a new program by using the "execve system call"

** Now use "ps -l" to see a detailed version of all the processes.

We notice 2 fields here: PID (Process ID) and PPID (Parent Process ID).

** To see the PID of an invisible process via the PPID, use "ps aux | grep (PPID)"

In this case:

we had the bash process as the parent process, ps as the child process and gnome as the grand parent process.

Hierarchy:

gnome
↓
bash
↓
ps

Now the ultimate parent process, one who is at the topmost level (i.e. the mother process) is called the "init" process.

When system boots up, the kernel creates the mother (i.e. init) process and this has a PID of 1.

This process runs on root privilages (since root is the owner of this process)and it runs a lot of processes which are responsible for the running of the system.  

These processes which are responsible for the running of the system, are called "daemon processes". Mother process is their parent.